---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization
    app.kubernetes.io/part-of: perihelion-auth-manager
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/version: "10.2.0"
  annotations:
    deployment.kubernetes.io/revision: "1"
    security.perihelion.io/security-profile: "strict"
    monitoring.perihelion.io/scrape: "true"
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/component: visualization
        app.kubernetes.io/part-of: perihelion-auth-manager
        app.kubernetes.io/version: "10.2.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
        security.perihelion.io/pod-security-profile: "restricted"
        security.perihelion.io/network-policy: "strict"
    spec:
      serviceAccountName: grafana
      automountServiceAccountToken: true
      
      # Security Context - Pod Level
      securityContext:
        runAsNonRoot: true
        runAsUser: 472  # grafana user
        runAsGroup: 472
        fsGroup: 472
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: []
      
      # Node Selection and Scheduling
      nodeSelector:
        kubernetes.io/arch: amd64
      
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
      
      initContainers:
      - name: init-dashboards
        image: busybox:1.36
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 472
          runAsGroup: 472
          capabilities:
            drop:
            - ALL
        command:
        - sh
        - -c
        - |
          mkdir -p /var/lib/grafana/dashboards/security
          mkdir -p /var/lib/grafana/dashboards/kubernetes  
          mkdir -p /var/lib/grafana/dashboards/gitlab
          cp /tmp/dashboards/security/* /var/lib/grafana/dashboards/security/ || true
          cp /tmp/dashboards/gitlab/* /var/lib/grafana/dashboards/gitlab/ || true
          chown -R 472:472 /var/lib/grafana/dashboards
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: dashboard-security
          mountPath: /tmp/dashboards/security
        - name: dashboard-gitlab
          mountPath: /tmp/dashboards/gitlab
      
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        imagePullPolicy: IfNotPresent
        
        # Security Context - Container Level
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 472
          runAsGroup: 472
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        
        # Resource Management
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
            ephemeral-storage: 100Mi
          limits:
            cpu: 500m
            memory: 1Gi
            ephemeral-storage: 2Gi
        
        # Ports
        ports:
        - name: grafana
          containerPort: 3000
          protocol: TCP
        
        # Environment Variables
        env:
        - name: GF_PATHS_DATA
          value: /var/lib/grafana
        - name: GF_PATHS_LOGS
          value: /var/log/grafana
        - name: GF_PATHS_PLUGINS
          value: /var/lib/grafana/plugins
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        
        # Volume Mounts
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana
          readOnly: true
        - name: grafana-secrets
          mountPath: /etc/grafana/secrets
          readOnly: true
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
          readOnly: true
        - name: grafana-dashboard-providers
          mountPath: /etc/grafana/provisioning/dashboards
          readOnly: true
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-logs
          mountPath: /var/log/grafana
        - name: tmp
          mountPath: /tmp
        
        # Health Checks
        livenessProbe:
          httpGet:
            path: /api/health
            port: grafana
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /api/health
            port: grafana
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /api/health
            port: grafana
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 12
      
      # Volumes
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
          defaultMode: 0444
      - name: grafana-secrets
        secret:
          secretName: grafana-secrets
          defaultMode: 0400
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
          defaultMode: 0444
      - name: grafana-dashboard-providers
        configMap:
          name: grafana-dashboard-providers
          defaultMode: 0444
      - name: dashboard-security
        configMap:
          name: grafana-dashboard-security
          defaultMode: 0444
      - name: dashboard-gitlab
        configMap:
          name: grafana-dashboard-gitlab
          defaultMode: 0444
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage
      - name: grafana-logs
        emptyDir:
          sizeLimit: 100Mi
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: storage
    app.kubernetes.io/part-of: perihelion-auth-manager
    app.kubernetes.io/managed-by: kubectl
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: local-path
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization
    app.kubernetes.io/part-of: perihelion-auth-manager
    app.kubernetes.io/managed-by: kubectl
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: grafana
  ports:
  - name: grafana
    port: 3000
    targetPort: grafana
    protocol: TCP
  sessionAffinity: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-security
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: configuration
    app.kubernetes.io/part-of: perihelion-auth-manager
    app.kubernetes.io/managed-by: kubectl
data:
  security-dashboard.json: |
    # Security dashboard will be loaded from separate file
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-gitlab
  namespace: monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: configuration
    app.kubernetes.io/part-of: perihelion-auth-manager
    app.kubernetes.io/managed-by: kubectl
data:
  gitlab-dashboard.json: |
    # GitLab dashboard will be loaded from separate file
