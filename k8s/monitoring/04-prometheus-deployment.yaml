---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: perihelion-auth-manager
    app.kubernetes.io/managed-by: kubectl
    app.kubernetes.io/version: "v2.48.0"
  annotations:
    deployment.kubernetes.io/revision: "1"
    security.perihelion.io/security-profile: "strict"
    monitoring.perihelion.io/scrape: "true"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/component: metrics
        app.kubernetes.io/part-of: perihelion-auth-manager
        app.kubernetes.io/version: "v2.48.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        security.perihelion.io/pod-security-profile: "restricted"
        security.perihelion.io/network-policy: "strict"
    spec:
      serviceAccountName: prometheus
      automountServiceAccountToken: true
      
      # Security Context - Pod Level
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534  # nobody user
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: []
      
      # Node Selection and Scheduling
      nodeSelector:
        kubernetes.io/arch: amd64
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: prometheus
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: DoesNotExist
      
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300
      
      # DNS Configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      # Termination Settings
      terminationGracePeriodSeconds: 60
      restartPolicy: Always
      
      containers:
      - name: prometheus
        image: prom/prometheus:v2.48.0
        imagePullPolicy: IfNotPresent
        
        # Security Context - Container Level
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        
        # Resource Management
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
            ephemeral-storage: 100Mi
          limits:
            cpu: 1000m
            memory: 2Gi
            ephemeral-storage: 2Gi
        
        # Ports
        ports:
        - name: web
          containerPort: 9090
          protocol: TCP
        
        # Arguments
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus/'
        - '--storage.tsdb.retention.time=30d'
        - '--storage.tsdb.retention.size=10GB'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--web.enable-lifecycle'
        - '--web.enable-admin-api' # consider disabling for security - may need alternatitve solution if admin is needed or security hardening for it
        - '--web.external-url=http://prometheus.monitoring.svc.cluster.local:9090'
        - '--web.route-prefix=/'
        - '--log.level=info'
        - '--log.format=json'
        - '--query.max-concurrency=20'
        - '--query.timeout=2m'
        - '--web.max-connections=512'
        - '--storage.tsdb.wal-compression'
        - '--storage.tsdb.head-chunks-write-queue-size=10000'
        
        # Volume Mounts
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
          readOnly: true
        - name: rules-volume
          mountPath: /etc/prometheus/rules
          readOnly: true
        - name: prometheus-storage
          mountPath: /prometheus
        - name: tmp
          mountPath: /tmp
        
        # Health Checks
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: web
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /-/ready
            port: web
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /-/ready
            port: web
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 20
      
      # Volumes
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config
          defaultMode: 0444
      - name: rules-volume
        configMap:
          name: prometheus-rules
          defaultMode: 0444
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: storage
    app.kubernetes.io/part-of: perihelion-auth-manager
    app.kubernetes.io/managed-by: kubectl
  annotations:
    volume.beta.kubernetes.io/storage-class: "local-path"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: local-path
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: perihelion-auth-manager
    app.kubernetes.io/managed-by: kubectl
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: prometheus
  ports:
  - name: web
    port: 9090
    targetPort: web
    protocol: TCP
  sessionAffinity: None
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: prometheus-pdb
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: perihelion-auth-manager
    app.kubernetes.io/managed-by: kubectl
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
