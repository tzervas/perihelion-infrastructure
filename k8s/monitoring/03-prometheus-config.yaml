---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: configuration
    app.kubernetes.io/part-of: perihelion-auth-manager
    app.kubernetes.io/managed-by: kubectl
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 15s
      external_labels:
        cluster: 'perihelion-homelab'
        environment: 'production'
    
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093
        scheme: http
        timeout: 10s
        api_version: v2
    
    rule_files:
    - "/etc/prometheus/rules/*.yml"
    
    scrape_configs:
    # Prometheus self-monitoring
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']
      scrape_interval: 30s
      metrics_path: /metrics
      scheme: http
    
    # AlertManager monitoring
    - job_name: 'alertmanager'
      static_configs:
      - targets: ['alertmanager:9093']
      scrape_interval: 30s
      metrics_path: /metrics
      scheme: http
    
    # Grafana monitoring
    - job_name: 'grafana'
      static_configs:
      - targets: ['grafana:3000']
      scrape_interval: 30s
      metrics_path: /metrics
      scheme: http
    
    # Kubernetes API server
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - default
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: false
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
      - target_label: __address__
        replacement: kubernetes.default.svc:443
    
    # Kubernetes nodes (kubelet)
    - job_name: 'kubernetes-nodes-kubelet'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics
    
    # Kubernetes node exporter metrics
    - job_name: 'kubernetes-nodes-cadvisor'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: 'container_cpu_usage_seconds_total|container_memory_usage_bytes|container_fs_usage_bytes|container_network_receive_bytes_total|container_network_transmit_bytes_total'
        action: keep
    
    # Kubernetes pods with prometheus.io/scrape: true annotation
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: kubernetes_container_name
    
    # ServiceMonitor discovery
    - job_name: 'kubernetes-service-endpoints'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name
    
    # GitLab Runner Controller metrics
    - job_name: 'gitlab-runner-controller'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - gitlab-runner-system
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: gitlab-runner-controller-metrics
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        target_label: kubernetes_service_name
      scrape_interval: 30s
      metrics_path: /metrics
      scheme: http
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: configuration
    app.kubernetes.io/part-of: perihelion-auth-manager
    app.kubernetes.io/managed-by: kubectl
data:
  security.yml: |
    groups:
    - name: security.rules
      rules:
      # High CPU usage - potential DDoS or crypto mining
      - alert: HighCPUUsage
        expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 90
        for: 5m
        labels:
          severity: warning
          category: security
        annotations:
          summary: "High CPU usage detected on {{ $labels.instance }}"
          description: "CPU usage is above 90% for more than 5 minutes on {{ $labels.instance }}"
      
      # High memory usage - potential memory exhaustion attack
      - alert: HighMemoryUsage
        expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 90
        for: 5m
        labels:
          severity: warning
          category: security
        annotations:
          summary: "High memory usage detected on {{ $labels.instance }}"
          description: "Memory usage is above 90% for more than 5 minutes on {{ $labels.instance }}"
      
      # Unusual network traffic - potential data exfiltration
      - alert: HighNetworkTraffic
        expr: rate(node_network_transmit_bytes_total[5m]) > 100000000
        for: 10m
        labels:
          severity: warning
          category: security
        annotations:
          summary: "High network traffic detected on {{ $labels.instance }}"
          description: "Network transmission rate is above 100MB/s for more than 10 minutes on {{ $labels.instance }}"
      
      # Failed authentication attempts
      - alert: HighErrorRate
        expr: rate(prometheus_http_requests_total{code=~"4..|5.."}[5m]) > 10
        for: 2m
        labels:
          severity: warning
          category: security
        annotations:
          summary: "High error rate detected"
          description: "HTTP error rate is above 10 requests/second for more than 2 minutes"
  
  gitlab.yml: |
    groups:
    - name: gitlab-runner-controller.rules
      rules:
      # GitLab Runner Controller is down
      - alert: GitLabRunnerControllerDown
        expr: up{job="gitlab-runner-controller"} == 0
        for: 1m
        labels:
          severity: critical
          category: application
        annotations:
          summary: "GitLab Runner Controller is down"
          description: "GitLab Runner Controller has been down for more than 1 minute"
      
      # High number of failed runner creations
      - alert: HighRunnerCreationFailures
        expr: rate(gitlab_runner_creation_failures_total[5m]) > 0.5
        for: 5m
        labels:
          severity: warning
          category: application
        annotations:
          summary: "High GitLab runner creation failure rate"
          description: "GitLab runner creation failure rate is above 0.5/second for more than 5 minutes"
      
      # No available runners
      - alert: NoAvailableRunners
        expr: gitlab_runners_available == 0
        for: 2m
        labels:
          severity: critical
          category: application
        annotations:
          summary: "No GitLab runners available"
          description: "No GitLab runners are currently available for job execution"
      
      # Runner queue is growing
      - alert: RunnerQueueGrowing
        expr: increase(gitlab_runner_queue_size[10m]) > 10
        for: 5m
        labels:
          severity: warning
          category: application
        annotations:
          summary: "GitLab runner queue is growing"
          description: "GitLab runner queue has grown by more than 10 jobs in the last 10 minutes"
  
  kubernetes.yml: |
    groups:
    - name: kubernetes.rules
      rules:
      # Pod crash looping
      - alert: PodCrashLooping
        expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
        for: 5m
        labels:
          severity: warning
          category: kubernetes
        annotations:
          summary: "Pod {{ $labels.namespace }}/{{ $labels.pod }} is crash looping"
          description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} has been restarting frequently"
      
      # Pod not ready
      - alert: PodNotReady
        expr: kube_pod_status_ready{condition="false"} == 1
          and ignoring (condition)
            kube_pod_status_phase{phase=~"Pending|Running"}
          and ignoring (pod)
            absent(kube_pod_deletion_timestamp{pod=~".+"})
        for: 10m
        labels:
          severity: warning
          category: kubernetes
        annotations:
          summary: "Pod {{ $labels.namespace }}/{{ $labels.pod }} is not ready"
          description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in a not ready state for over 10 minutes and is not terminating or in a completed phase."
        expr: kube_pod_status_ready{condition="false"} == 1
        for: 10m
        labels:
          severity: warning
          category: kubernetes
        annotations:
          summary: "Pod {{ $labels.namespace }}/{{ $labels.pod }} is not ready"
          description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} has been in not ready state for more than 10 minutes"
      
      # Node not ready
      - alert: NodeNotReady
        expr: kube_node_status_condition{condition="Ready",status="true"} == 0
        for: 5m
        labels:
          severity: critical
          category: kubernetes
        annotations:
          summary: "Node {{ $labels.node }} is not ready"
          description: "Node {{ $labels.node }} has been in not ready state for more than 5 minutes"
      
      # Persistent volume claim pending
      - alert: PVCPending
        expr: kube_persistentvolumeclaim_status_phase{phase="Pending"} == 1
        for: 10m
        labels:
          severity: warning
          category: kubernetes
        annotations:
          summary: "PVC {{ $labels.namespace }}/{{ $labels.persistentvolumeclaim }} is pending"
          description: "PVC {{ $labels.namespace }}/{{ $labels.persistentvolumeclaim }} has been pending for more than 10 minutes"
