---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluent-bit
  namespace: logging
  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/component: logging
    app.kubernetes.io/part-of: perihelion-auth-manager
    app.kubernetes.io/managed-by: kubectl
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fluent-bit
  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/component: logging
    app.kubernetes.io/part-of: perihelion-auth-manager
    app.kubernetes.io/managed-by: kubectl
rules:
# Pods and namespaces for log collection
- apiGroups: [""]
  resources: ["pods", "namespaces"]
  verbs: ["get", "list", "watch"]
# Nodes for node-level log collection
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fluent-bit
  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/component: logging
    app.kubernetes.io/part-of: perihelion-auth-manager
    app.kubernetes.io/managed-by: kubectl
subjects:
- kind: ServiceAccount
  name: fluent-bit
  namespace: logging
roleRef:
  kind: ClusterRole
  name: fluent-bit
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fluent-bit-config
  namespace: logging
  labels:
    app.kubernetes.io/name: fluent-bit
    app.kubernetes.io/component: configuration
    app.kubernetes.io/part-of: perihelion-auth-manager
    app.kubernetes.io/managed-by: kubectl
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush         5
        Log_Level     info
        Daemon        off
        Parsers_File  parsers.conf
        HTTP_Server   On
        HTTP_Listen   0.0.0.0
        HTTP_Port     2020
        Health_Check  On
        storage.path  /var/log/flb-storage/
        storage.sync  normal
        storage.checksum  off
        storage.backlog.mem_limit  5M
    
    [INPUT]
        Name              tail
        Tag               kube.*
        Path              /var/log/containers/*.log
        Parser            cri
        DB                /var/log/flb_kube.db
        Mem_Buf_Limit     50MB
        Skip_Long_Lines   On
        Refresh_Interval  10
        storage.type      filesystem
    
    [INPUT]
        Name              systemd
        Tag               systemd.*
        Systemd_Filter    _SYSTEMD_UNIT=kubelet.service
        Systemd_Filter    _SYSTEMD_UNIT=containerd.service
        Systemd_Filter    _SYSTEMD_UNIT=docker.service
        Read_From_Tail    On
        storage.type      filesystem
    
    [FILTER]
        Name                kubernetes
        Match               kube.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Kube_Tag_Prefix     kube.var.log.containers.
        Merge_Log           On
        Merge_Log_Key       log_processed
        K8S-Logging.Parser  On
        K8S-Logging.Exclude Off
        Annotations         Off
        Labels              On
        Buffer_Size         32k
    
    [FILTER]
        Name                grep
        Match               kube.*
        # Exclude             log ERROR.*
        # Exclude             log WARN.*
    
    [FILTER]
        Name                record_modifier
        Match               kube.*
        Record              cluster_name perihelion-homelab
        Record              environment production
    
    [FILTER]
        Name                lua
        Match               kube.*
        Script              security_filter.lua
        Call                security_classify
    
    [OUTPUT]
        Name                forward
        Match               kube.*
        Host                loki.logging.svc.cluster.local
        Port                3100
        HTTP_User           admin
        HTTP_Passwd         ${LOKI_PASSWORD}
        Format              json
        tls                 on
        tls.verify          on
        Retry_Limit         5
        storage.total_limit_size  1G
    
    [OUTPUT]
        Name                forward
        Match               systemd.*
        Host                loki.logging.svc.cluster.local
        Port                3100
        HTTP_User           admin
        HTTP_Passwd         ${LOKI_PASSWORD}
        Format              json
        tls                 on
        tls.verify          on
        Retry_Limit         5
    
    [OUTPUT]
        Name                prometheus_exporter
        Match               *
        host                0.0.0.0
        port                2021

  parsers.conf: |
    [PARSER]
        Name   cri
        Format regex
        Regex  ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<log>.*)$
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z
    
    [PARSER]
        Name        json
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L
        Time_Keep   On
    
    [PARSER]
        Name        gitlab_json
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L%z
        Time_Keep   On
    
    [PARSER]
        Name        prometheus_metrics
        Format      regex
        Regex       (?<name>[a-zA-Z_:][a-zA-Z0-9_:]*)(?:\{(?<labels>[^}]+)\})?\s+(?<value>[\d\.\+\-eE]+)

  security_filter.lua: |
    function security_classify(tag, timestamp, record)
        local new_record = {}
        for k, v in pairs(record) do
            new_record[k] = v
        end
        
        -- Security classification
        local log_msg = record["log"] or ""
        local pod_name = record["kubernetes"]["pod_name"] or ""
        local namespace = record["kubernetes"]["namespace_name"] or ""
        
        -- Classify security events
        if string.match(log_msg, "authentication.*failed") or
           string.match(log_msg, "access.*denied") or
           string.match(log_msg, "unauthorized") then
            new_record["security_level"] = "high"
            new_record["event_type"] = "security"
        elseif string.match(log_msg, "ERROR") then
            new_record["security_level"] = "medium"
            new_record["event_type"] = "error"
        else
            new_record["security_level"] = "low"
            new_record["event_type"] = "normal"
        end
        
        -- Add cluster context
        new_record["cluster"] = "perihelion-homelab"
        new_record["region"] = "homelab"
        
        -- Sensitive data filtering
        if string.match(log_msg, "password") or
           string.match(log_msg, "token") or
           string.match(log_msg, "secret") then
            new_record["log"] = "[REDACTED] - Sensitive data filtered"
            new_record["security_level"] = "high"
            new_record["event_type"] = "security"
        end
        
        return 1, timestamp, new_record
    end
